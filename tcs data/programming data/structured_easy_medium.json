[
  {
    "id": 1,
    "problem_statement": "Problem Statement \u2013 A chocolate factory is packing chocolates into the packets. The chocolate packets here represent an array\u00a0 of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array). Example 1 : N=8 and arr = [4,5,0,1,9,0,5,0]. There are 3 empty packets in the given set. These 3 empty packets represented as O should be pushed towards the end of the array Input : 8\u00a0 \u2013 Value of N [4,5,0,1,9,0,5,0] \u2013 Element of arr[O] to arr[N-1],While input each element is separated by newline Output: 4 5 1 9 5 0 0 0 Example 2: Input: 6\u00a0\u2014 Value of N. [6,0,1,8,0,2] \u2013 Element of arr[0] to arr[N-1], While input each element is separated by newline Output: 6 1 8 2 0 0",
    "example": [
      "Example 2: Input: 6\u00a0\u2014 Value of N. [6,0,1,8,0,2] \u2013 Element of arr[0] to arr[N-1], While input each element is separated by newline Output: 6 1 8 2 0 0"
    ],
    "input": [
      "8\u00a0 \u2013 Value of N [4,5,0,1,9,0,5,0] \u2013 Element of arr[O] to arr[N-1],While input each element is separated by newline",
      "6\u00a0\u2014 Value of N. [6,0,1,8,0,2] \u2013 Element of arr[0] to arr[N-1], While input each element is separated by newline"
    ],
    "output": [
      "4 5 1 9 5 0 0 0",
      "6 1 8 2 0 0"
    ],
    "solution": "Solution:- n=int(input()) j=0 L=[0 for i in range(n)] for i in range(n): a=int(input()) if a!=0: L[j]=a j+=1 for i in L: print(i,end=\" \")"
  },
  {
    "id": 2,
    "problem_statement": "Problem Statement \u2013 Joseph is learning digital logic subject which will be for his next semester. He usually tries to solve unit assignment problems before the lecture. Today he got one tricky question. The problem statement is \u201cA positive integer has been given as an input. Convert decimal value to binary representation. Toggle all bits of it after the most significant bit including the most significant bit. Print the positive integer value after toggling all bits\u201d. Constrains- 1<=N<=100 Example 1: Input : 10\u00a0 -> Integer Output : 5\u00a0 \u00a0 -> result- Integer Explanation: Binary representation of 10 is 1010. After toggling the bits(1010), will get 0101 which represents \u201c5\u201d. Hence output will print \u201c5\u201d.",
    "example": [
      "Example 1: Input : 10\u00a0 -> Integer Output : 5\u00a0 \u00a0 -> result- Integer Explanation: Binary representation of 10 is 1010. After toggling the bits(1010), will get 0101 which represents \u201c5\u201d. Hence output will print \u201c5\u201d."
    ],
    "input": [
      "10\u00a0 -> Integer"
    ],
    "output": [
      "5\u00a0 \u00a0 -> result- Integer Explanation: Binary representation of 10 is 1010. After toggling the bits(1010), will get 0101 which represents \u201c5\u201d. Hence output will print \u201c5\u201d."
    ],
    "solution": "Solution:- n = int(input()) arr = [] for i in range(n): arr.append(int(input())) for i in sorted(arr): print(i, end=\" \")"
  },
  {
    "id": 3,
    "problem_statement": "Problem Statement: Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements. Note : 1st element of the array should be considered in the count of the result. For example, Arr[]={7,4,8,2,9} As 7 is the first element, it will consider in the result. 8 and 9 are also the elements that are greater than all of its previous elements. Since total of\u00a0 3 elements is present in the array that meets the condition. Hence the output = 3. Example 1: Input 5 -> Value of N, represents size of Arr 7-> Value of Arr[0] 4 -> Value of Arr[1] 8-> Value of Arr[2] 2-> Value of Arr[3] 9-> Value of Arr[4] Output : 3 Example 2: 5 \u00a0 -> Value of N, represents size of Arr 3\u00a0 -> Value of Arr[0] 4 -> Value of Arr[1] 5 -> Value of Arr[2] 8 -> Value of Arr[3] 9 -> Value of Arr[4] Output : 5 Constraints 1<=N<=20 1<=Arr[i]<=10000",
    "example": [
      "Example 1: Input 5 -> Value of N, represents size of Arr 7-> Value of Arr[0] 4 -> Value of Arr[1] 8-> Value of Arr[2] 2-> Value of Arr[3] 9-> Value of Arr[4] Output : 3",
      "Example 2: 5 \u00a0 -> Value of N, represents size of Arr 3\u00a0 -> Value of Arr[0] 4 -> Value of Arr[1] 5 -> Value of Arr[2] 8 -> Value of Arr[3] 9 -> Value of Arr[4] Output : 5 Constraints 1<=N<=20 1<=Arr[i]<=10000"
    ],
    "input": null,
    "output": [
      "3",
      "5 Constraints 1<=N<=20 1<=Arr[i]<=10000"
    ],
    "solution": "Solution:- import sys n=int(input()) c=0 m=-sys.maxsize-1 while n: n-=1 a=int(input()) if a>m: m=a c+=1 print(c)"
  },
  {
    "id": 4,
    "problem_statement": "Problem Statement: A supermarket maintains a pricing format for all its products. A value N is printed on each product. When the scanner reads the value N on the item, the product of all the digits in the value N is the price of the item. The task here is to design the software such that given the code of any item N the product (multiplication) of all the digits of value should be computed(price). Example 1: Input : 5244 -> Value of N Output :\n160 -> Price Explanation: From the input above Product of the digits 5,2,4,4 5*2*4*4= 160 Hence, output is 160.",
    "example": [
      "Example 1: Input : 5244 -> Value of N Output :\n160 -> Price Explanation: From the input above Product of the digits 5,2,4,4 5*2*4*4= 160 Hence, output is 160."
    ],
    "input": [
      "5244 -> Value of N"
    ],
    "output": [
      "160 -> Price Explanation: From the input above Product of the digits 5,2,4,4 5*2*4*4= 160 Hence, output is 160."
    ],
    "solution": "Solution:- n=input() p=1 for i in n: p*=int(i) print(p)"
  },
  {
    "id": 5,
    "problem_statement": "Problem Statement: A furnishing company is manufacturing a new collection of curtains. The curtains are of two colors aqua(a) and black (b). The curtains color is represented as a string(str) consisting of a\u2019s and b\u2019s of length N. Then, they are packed (substring) into L number of curtains in each box. The box with the maximum number of \u2018aqua\u2019 (a) color curtains is labeled. The task here is to find the number of \u2018aqua\u2019 color curtains in the labeled box. Note : If \u2018L\u2019 is not a multiple of N, the remaining number of curtains should be considered as a substring too. In simple words, after dividing the curtains in sets of \u2018L\u2019, any curtains left will be another set(refer example 1) Example 1: Input : bbbaaababa -> Value of str 3\u00a0 \u00a0 -> Value of L Output: 3 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above. Dividing the string into sets of 3 characters each Set 1: {b,b,b} Set 2: {a,a,a} Set 3: {b,a,b} Set 4: {a} -> leftover characters also as taken as another set Among all the sets, Set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 3. Hence, the output is 3. Example 2: Input : abbbaabbb -> Value of str 5 \u00a0 -> Value of L Output: 2 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above, Dividing the string into sets of 5 characters each. Set 1: {a,b,b,b,b} Set 2: {a,a,b,b,b} Among both the sets, set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 2. Hence, the output is 2. Constraints: 1<=L<=10 1<=N<=50 The input format for testing The candidate has to write the code to accept two inputs separated by a new line. First input- Accept string that contains character a and b only Second input- Accept value for N(Positive integer number) The output\u00a0 format for testing The output should be a positive integer number of print the message(if any) given in the problem statement.(Check the output in Example 1, Example 2).",
    "example": [
      "Example 1: Input : bbbaaababa -> Value of str 3\u00a0 \u00a0 -> Value of L Output: 3 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above. Dividing the string into sets of 3 characters each Set 1: {b,b,b} Set 2: {a,a,a} Set 3: {b,a,b} Set 4: {a} -> leftover characters also as taken as another set Among all the sets, Set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 3. Hence, the output is 3.",
      "Example 2: Input : abbbaabbb -> Value of str 5 \u00a0 -> Value of L Output: 2 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above, Dividing the string into sets of 5 characters each. Set 1: {a,b,b,b,b} Set 2: {a,a,b,b,b} Among both the sets, set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 2. Hence, the output is 2. Constraints: 1<=L<=10 1<=N<=50 The input format for testing The candidate has to write the code to accept two inputs separated by a new line. First input- Accept string that contains character a and b only Second input- Accept value for N(Positive integer number) The output\u00a0 format for testing The output should be a positive integer number of print the message(if any) given in the problem statement.(Check the output in"
    ],
    "input": [
      "bbbaaababa -> Value of str 3\u00a0 \u00a0 -> Value of L",
      "abbbaabbb -> Value of str 5 \u00a0 -> Value of L"
    ],
    "output": [
      "3 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above. Dividing the string into sets of 3 characters each Set 1: {b,b,b} Set 2: {a,a,a} Set 3: {b,a,b} Set 4: {a} -> leftover characters also as taken as another set Among all the sets, Set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 3. Hence, the output is 3.",
      "2 \u00a0 -> Maximum number of a\u2019s Explanation: From the input given above, Dividing the string into sets of 5 characters each. Set 1: {a,b,b,b,b} Set 2: {a,a,b,b,b} Among both the sets, set 2 has more number of a\u2019s. The number of a\u2019s in set 2 is 2. Hence, the output is 2. Constraints: 1<=L<=10 1<=N<=50 The input format for testing The candidate has to write the code to accept two inputs separated by a new line. First input- Accept string that contains character a and b only Second input- Accept value for N(Positive integer number) The output\u00a0 format for testing The output should be a positive integer number of print the message(if any) given in the problem statement.(Check the output in"
    ],
    "solution": "Solution:- str = input() n = int(input()) max_val = 0 count = 0 for i in range(len(str)): if i % n == 0: max_val = max(count, max_val) count = 0 if str[i] == 'a': count += 1 if count > max_val: max_val = count print(max_val)"
  },
  {
    "id": 6,
    "problem_statement": "Problem Statement: An international round table conference will be held in india. Presidents from all over the world representing their respective countries will be attending the conference. The task is to find the possible number of ways(P) to make the N members sit around the circular table such that. The president and prime minister of India will always sit next to each other. Example 1: Input : 4 \u00a0 -> Value of N(No. of members) Output : 12\u00a0 -> Possible ways of seating the members Explanation: 2\u00a0 members should always be next to each other. So, 2 members can be in 2!ways Rest of the members can be arranged in (4-1)! ways.(1 is subtracted because the previously selected two members will be considered as single members now). So total possible ways 4 members can be seated around the circular table 2*6= 12. Hence, output is 12. Example 2: Input: 10\u00a0 -> Value of N(No. of members) Output : 725760 -> Possible ways of seating the members Explanation: 2 members should always be next to each other. So, 2 members can be in 2! ways Rest of the members can be arranged in (10-1)! Ways. (1 is subtracted because the previously selected two members will be considered as a single member now). So, total possible ways 10 members can be seated around a round table is 2*362880 = 725760 ways. Hence, output is 725760. The input format for testing The candidate has to write the code to accept one input First input \u2013 Accept value of number of N(Positive integer number) The output format for testing The output should be a positive integer number or print the message(if any) given in the problem statement(Check the output in example 1, example2) Constraints : 2<=N<=50",
    "example": [
      "Example 1: Input : 4 \u00a0 -> Value of N(No. of members) Output : 12\u00a0 -> Possible ways of seating the members Explanation: 2\u00a0 members should always be next to each other. So, 2 members can be in 2!ways Rest of the members can be arranged in (4-1)! ways.(1 is subtracted because the previously selected two members will be considered as single members now). So total possible ways 4 members can be seated around the circular table 2*6= 12. Hence, output is 12.",
      "Example 2: Input: 10\u00a0 -> Value of N(No. of members) Output : 725760 -> Possible ways of seating the members Explanation: 2 members should always be next to each other. So, 2 members can be in 2! ways Rest of the members can be arranged in (10-1)! Ways. (1 is subtracted because the previously selected two members will be considered as a single member now). So, total possible ways 10 members can be seated around a round table is 2*362880 = 725760 ways. Hence, output is 725760. The input format for testing The candidate has to write the code to accept one input First input \u2013 Accept value of number of N(Positive integer number) The output format for testing The output should be a positive integer number or print the message(if any) given in the problem statement(Check the output in example 1, example2) Constraints : 2<=N<=50"
    ],
    "input": [
      "4 \u00a0 -> Value of N(No. of members)",
      "10\u00a0 -> Value of N(No. of members)"
    ],
    "output": [
      "12\u00a0 -> Possible ways of seating the members Explanation: 2\u00a0 members should always be next to each other. So, 2 members can be in 2!ways Rest of the members can be arranged in (4-1)! ways.(1 is subtracted because the previously selected two members will be considered as single members now). So total possible ways 4 members can be seated around the circular table 2*6= 12. Hence, output is 12.",
      "725760 -> Possible ways of seating the members Explanation: 2 members should always be next to each other. So, 2 members can be in 2! ways Rest of the members can be arranged in (10-1)! Ways. (1 is subtracted because the previously selected two members will be considered as a single member now). So, total possible ways 10 members can be seated around a round table is 2*362880 = 725760 ways. Hence, output is 725760. The input format for testing The candidate has to write the code to accept one input First input \u2013 Accept value of number of N(Positive integer number) The output format for testing The output should be a positive integer number or print the message(if any) given in the problem statement(Check the output in example 1, example2) Constraints : 2<=N<=50"
    ],
    "solution": "Solution:- n = int(input()) fact = [0] * (n + 1) fact[0] = 1 for i in range(1, n + 1): fact[i] = fact[i - 1] * i print(fact[n - 1] * 2)"
  },
  {
    "id": 7,
    "problem_statement": "Problem Statement: An intelligence agency has received reports about some threats. The reports consist of numbers in a mysterious method. There is a number \u201cN\u201d and another number \u201cR\u201d. Those numbers are studied thoroughly and it is concluded that all digits of the number \u2018N\u2019 are summed up and this action is performed \u2018R\u2019 number of times. The resultant is also a single digit that is yet to be deciphered. The task here is to find the single-digit sum of the given number \u2018N\u2019 by repeating the action \u2018R\u2019 number of times. If the value of \u2018R\u2019 is 0, print the output as \u20180\u2019. Example 1: Input : 99 -> Value of N 3\u00a0 -> Value of R Output : 9\u00a0 -> Possible ways to fill the cistern. Explanation: Here, the number N=99 Sum of the digits N: 9+9 = 18 Repeat step 2 \u2018R\u2019 times i.e. 3 tims\u00a0 (9+9)+(9+9)+(9+9) = 18+18+18 =54 Add digits of 54 as we need a single digit 5+4 Hence , the output is 9. Example 2: Input : 1234 \u00a0 -> Value of N 2\u00a0 \u00a0 \u00a0 -> Value of R Output : 2\u00a0 -> Possible ways to fill the cistern Explanation: Here, the number N=1234 Sum of the digits of N: 1+2+3+4 =10 Repeat step 2 \u2018R\u2019 times i.e. 2 times\u00a0 (1+2+3+4)+(1+2+3+4)= 10+10=20 Add digits of 20 as we need a single digit. 2+0=2 Hence, the output is 2. Constraints: 0<N<=1000 0<=R<=50 The Input format for testing The candidate has to write the code to accept 2 input(s) First input- Accept value for N (positive integer number) Second input: Accept value for R(Positive integer number) The output format for testing The output should be a positive integer number or print the message (if any) given in the problem statement. (Check the output in Example 1, Example 2).",
    "example": [
      "Example 1: Input : 99 -> Value of N 3\u00a0 -> Value of R Output : 9\u00a0 -> Possible ways to fill the cistern. Explanation: Here, the number N=99 Sum of the digits N: 9+9 = 18 Repeat step 2 \u2018R\u2019 times i.e. 3 tims\u00a0 (9+9)+(9+9)+(9+9) = 18+18+18 =54 Add digits of 54 as we need a single digit 5+4 Hence , the output is 9.",
      "Example 2: Input : 1234 \u00a0 -> Value of N 2\u00a0 \u00a0 \u00a0 -> Value of R Output : 2\u00a0 -> Possible ways to fill the cistern Explanation: Here, the number N=1234 Sum of the digits of N: 1+2+3+4 =10 Repeat step 2 \u2018R\u2019 times i.e. 2 times\u00a0 (1+2+3+4)+(1+2+3+4)= 10+10=20 Add digits of 20 as we need a single digit. 2+0=2 Hence, the output is 2. Constraints: 0<N<=1000 0<=R<=50 The Input format for testing The candidate has to write the code to accept 2 input(s) First input- Accept value for N (positive integer number) Second input: Accept value for R(Positive integer number) The output format for testing The output should be a positive integer number or print the message (if any) given in the problem statement. (Check the output in"
    ],
    "input": [
      "99 -> Value of N 3\u00a0 -> Value of R",
      "1234 \u00a0 -> Value of N 2\u00a0 \u00a0 \u00a0 -> Value of R"
    ],
    "output": [
      "9\u00a0 -> Possible ways to fill the cistern. Explanation: Here, the number N=99 Sum of the digits N: 9+9 = 18 Repeat step 2 \u2018R\u2019 times i.e. 3 tims\u00a0 (9+9)+(9+9)+(9+9) = 18+18+18 =54 Add digits of 54 as we need a single digit 5+4 Hence , the output is 9.",
      "2\u00a0 -> Possible ways to fill the cistern Explanation: Here, the number N=1234 Sum of the digits of N: 1+2+3+4 =10 Repeat step 2 \u2018R\u2019 times i.e. 2 times\u00a0 (1+2+3+4)+(1+2+3+4)= 10+10=20 Add digits of 20 as we need a single digit. 2+0=2 Hence, the output is 2. Constraints: 0<N<=1000 0<=R<=50 The"
    ],
    "solution": "Solution: s=input() n=int(input()) sum=0 for i in s: sum+=int(i) sum*=n s=str(sum) while len(s)>1: sum=0 for i in s: sum+=int(i) s=str(sum) print(s)"
  },
  {
    "id": 8,
    "problem_statement": "Problem Statement Particulate matters are the biggest contributors to Delhi pollution. The main reason behind the increase in the concentration of PMs include vehicle emission by applying Odd Even concept for all types of vehicles. The vehicles with the odd last digit in the registration number will be allowed on roads on odd dates and those with even last digit will on even dates. Given an integer array a[], contains the last digit of the registration number of N vehicles traveling on date D(a positive integer). The task is to calculate the total fine collected by the traffic police department from the vehicles violating the rules. Note :\u00a0For violating the rule, vehicles would be fined as X Rs. Example 1: Input : 4 -> Value of N {5,2,3,7} -> a[], Elements a[0] to a[N-1], during input each element is separated by a new line 12 -> Value of D, i.e. date 200 -> Value of x i.e. fine Output : 600\u00a0 -> total fine collected Explanation: Date D=12 means , only an even number of vehicles are allowed. Find will be collected from 5,3 and 7 with an amount of 200 each. Hence, the output = 600. Example 2: Input : 5 \u00a0 -> Value of N {2,5,1,6,8}\u00a0 -> a[], elements a[0] to a[N-1], during input each element is separated by new line 3 -> Value of D i.e. date 300 -> Value of X i.e. fine Output : 900\u00a0 -> total fine collected Explanation: Date D=3 means only odd number vehicles with are allowed. Find will be collected from 2,6 and 8 with an amount of 300 each. Hence, the output = 900 Constraints: 0<N<=100 1<=a[i]<=9 1<=D <=30 100<=x<=5000 The input format for testing The candidate has to write the code to accept 4 input(s). First input \u2013 Accept for N(Positive integer) values (a[]), where each value is separated by a new line. Third input \u2013 Accept value for D(Positive integer) Fourth input \u2013 Accept value for X(Positive integer ) The output format for testing The output should be a positive integer number (Check the output in Example 1, Example e) if no fine is collected then print \u201d0\u201d.",
    "example": [
      "Example 1: Input : 4 -> Value of N {5,2,3,7} -> a[], Elements a[0] to a[N-1], during input each element is separated by a new line 12 -> Value of D, i.e. date 200 -> Value of x i.e. fine Output : 600\u00a0 -> total fine collected Explanation: Date D=12 means , only an even number of vehicles are allowed. Find will be collected from 5,3 and 7 with an amount of 200 each. Hence, the output = 600.",
      "Example 2: Input : 5 \u00a0 -> Value of N {2,5,1,6,8}\u00a0 -> a[], elements a[0] to a[N-1], during input each element is separated by new line 3 -> Value of D i.e. date 300 -> Value of X i.e. fine Output : 900\u00a0 -> total fine collected Explanation: Date D=3 means only odd number vehicles with are allowed. Find will be collected from 2,6 and 8 with an amount of 300 each. Hence, the output = 900 Constraints: 0<N<=100 1<=a[i]<=9 1<=D <=30 100<=x<=5000 The input format for testing The candidate has to write the code to accept 4 input(s). First input \u2013 Accept for N(Positive integer) values (a[]), where each value is separated by a new line. Third input \u2013 Accept value for D(Positive integer) Fourth input \u2013 Accept value for X(Positive integer ) The output format for testing The output should be a positive integer number (Check the output in"
    ],
    "input": [
      "4 -> Value of N {5,2,3,7} -> a[], Elements a[0] to a[N-1], during input each element is separated by a new line 12 -> Value of D, i.e. date 200 -> Value of x i.e. fine",
      "5 \u00a0 -> Value of N {2,5,1,6,8}\u00a0 -> a[], elements a[0] to a[N-1], during input each element is separated by new line 3 -> Value of D i.e. date 300 -> Value of X i.e. fine"
    ],
    "output": [
      "600\u00a0 -> total fine collected Explanation: Date D=12 means , only an even number of vehicles are allowed. Find will be collected from 5,3 and 7 with an amount of 200 each. Hence, the output = 600.",
      "900\u00a0 -> total fine collected Explanation: Date D=3 means only odd number vehicles with are allowed. Find will be collected from 2,6 and 8 with an amount of 300 each. Hence, the output = 900 Constraints: 0<N<=100 1<=a[i]<=9 1<=D <=30 100<=x<=5000 The input format for testing The candidate has to write the code to accept 4 input(s). First input \u2013 Accept for N(Positive integer) values (a[]), where each value is separated by a new line. Third input \u2013 Accept value for D(Positive integer) Fourth input \u2013 Accept value for X(Positive integer ) The output format for testing The output should be a positive integer number (Check the output in"
    ],
    "solution": "Solution:- n = int(input()) arr = list(map(int, input().split())) d, x = map(int, input().split()) countEven = 0 countOdd = 0 for i in range(n): if arr[i] % 2 == 0: countEven += 1 else: countOdd += 1 if d % 2 != 0: if countEven == 0: print(\"0\") else: print(countEven * x) else: if countOdd == 0: print(\"0\") else: print(countOdd * x)"
  },
  {
    "id": 9,
    "problem_statement": "Problem Statement: ou're given a list of numbers. Your task is to find how many pairs of numbers in that list add up to an even number. A pair consists of two different numbers from the list. For example, in the list [1, 2, 3, 4], the pairs that sum to an even number are (1, 3) and (2, 4). Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of two lines of input. The first line of each test case contain\u00a0NN, length of array\u00a0arrarr. The second line consist of the array\u00a0arrarr. Output Format For each test case, output on a new line the number of divisible pairs. Constraints 1\u2264T\u22641001\u2264T\u2264100 2\u2264N\u22641052\u2264N\u2264105 0\u2264arri\u22641050\u2264arri\u200b\u2264105 Sample 1: Input: 3 4 6 1 2 3 6 2 2 1 7 5 3 2 4 8 Output: 2 7 1 Explanation: Test Case 1: There are only two pairs formed- (6,2) and (1,3). Test case 2: These are the 7 pairs that are formed- (2,2), (1,7), (1,5), (1,3), (7,5), (7,3), (5,3). Test case 3: There is only one pair that is formed- (4,8).",
    "example": null,
    "input": [
      "3 4 6 1 2 3 6 2 2 1 7 5 3 2 4 8"
    ],
    "output": [
      "2 7 1 Explanation: Test Case 1: There are only two pairs formed- (6,2) and (1,3). Test case 2: These are the 7 pairs that are formed- (2,2), (1,7), (1,5), (1,3), (7,5), (7,3), (5,3). Test case 3: There is only one pair that is formed- (4,8)."
    ],
    "solution": "Solution: def count_divisible_pairs(arr): even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs t = int(input()) for _ in range(t): n = int(input()) arr = list(map(int, input().split())) result = count_divisible_pairs(arr) print(result)"
  },
  {
    "id": 10,
    "problem_statement": "Problem Statement: You are given a positive integer\u00a0NN. Your task is to compute the factorial of\u00a0NN\u00a0without using any multiplication\u00a0(\u2217)(\u2217)\u00a0or division\u00a0(/)(/)\u00a0operators. Factorial of a number\u00a0NN\u00a0is defined as:\u00a0N!=N\u00d7(N\u22121)\u00d7(N\u22122)\u00d7...\u00d71N!=N\u00d7(N\u22121)\u00d7(N\u22122)\u00d7...\u00d71. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each of the next\u00a0TT\u00a0lines will contain a single integer\u00a0NN, where\u00a0NN\u00a0is the number for which you need to calculate the factorial. Output Format For each test case, output the factorial of the given number\u00a0NN. Constraints 1\u2264T\u2264101\u2264T\u226410 0\u2264N\u2264120\u2264N\u226412 Sample 1: Input 2 5 9 Output 120 362880 Explanation: Test Case 1: 5x4x3x2x1 = 120 Test Case 2: 9x8x7x6x5x4x3x2x1 = 362880",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution:- def factorial(n): if n == 0 or n == 1: return 1 fact = 1 for i in range(2, n+1): temp = 0 for j in range(i): temp += fact fact = temp return fact t = int(input()) for _ in range(t): n = int(input()) print(factorial(n))"
  },
  {
    "id": 11,
    "problem_statement": "Problem Statement: You are given a\u00a02D\u00a0matrix of size\u00a0n\u00d7mn\u00d7m\u00a0consisting only of\u00a00\u2032s0\u2032s\u00a0and\u00a01\u2032s1\u2032s. Your task is to determine the index of the row that contains the maximum number of\u00a01\u2032s1\u2032s. In the case of multiple rows having the same maximum count of\u00a01\u2032s1\u2032s, return the index of the first such row. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of multiple lines of input. The first line contains two integers\u00a0nn\u00a0and\u00a0mm, representing the number of rows and columns in the matrix, respectively. The next\u00a0nn\u00a0lines each contain\u00a0mm\u00a0integers (00\u00a0or\u00a011), representing the elements of the matrix. Output Format For each test case, output a single integer, the index (00-based) of the row that has the maximum number of\u00a01\u2032s1\u2032s. If all rows contain only\u00a00\u2032s0\u2032s, output\u00a0\u22121\u22121. Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264N,M\u226410001\u2264N,M\u22641000 The elements of the matrix are either\u00a000\u00a0or\u00a011. Sample 1: Input 3 3 4 0 1 0 0 1 1 0 0 0 0 0 1 4 4 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 2 1 0 0 Output 1 3 -1 Explanation: Test Case 1: The second row (index\u00a011) contains two\u00a01\u2032s1\u2032s, which is the maximum count of\u00a01\u2032s1\u2032s\u00a0among all rows. Test Case 2: The fourth row (index\u00a033) contains four\u00a01\u2032s1\u2032s, which is the maximum count of\u00a01\u2032s1\u2032s\u00a0among all rows. Test Case 3: Only\u00a00\u2032s0\u2032s\u00a0are present.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def row_with_max_ones(matrix): max_count = 0 row_index = -1 n = len(matrix) m = len(matrix[0]) if n > 0 else 0 for i in range(n): count = sum(1 for x in matrix[i] if x == 1) if count > max_count: max_count = count row_index = i return row_index if __name__ == \"__main__\": t = int(input()) for _ in range(t): n, m = map(int, input().split()) matrix = [list(map(int, input().split())) for _ in range(n)] result = row_with_max_ones(matrix) print(result if result != -1 else -1)"
  },
  {
    "id": 12,
    "problem_statement": "Problem Statement: You are given two strings,\u00a0str1\u00a0and\u00a0str2. Your mission is to calculate the total number of occurrences of each unique character of\u00a0str2\u00a0within the string\u00a0str1. The task is to find the\u00a0sum\u00a0of occurrences of all unique characters from\u00a0str2\u00a0in\u00a0str1\u00a0and return this total count. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. For each test case: The first line contains the string\u00a0str1. The second line contains the string\u00a0str2. Output Format For each test case, output the total sum of occurrences of characters in\u00a0str2\u00a0found in\u00a0str1\u00a0on a new line. Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264\u2223str1\u2223,\u2223str2\u2223\u22641051\u2264\u2223str1\u2223,\u2223str2\u2223\u2264105 The strings consists of lowercase letters only. Sample 1: Input 3 helloworld do abacabadabacaba abcd abc abcdabcdabcdabcd Output 3 15 3 Explanation: Test Case 1: the character 'd' appears once and 'o' appears twice in \"helloworld\", so the total count is 3. Test Case 2: The characters from \"abcd\" appear as follows in \"abacabadabacaba\": 'a': 7 occurrences 'b': 4 occurrences 'c': 2 occurrences 'd': 2 occurrences Total = 7 + 4 + 2 + 2 = 15. Test Case 3: The characters appear only once in abc as we are calculating the unique characters of abcdabcdabcdabcd.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution:- def sum_of_occurrences(str1, str2): freq_map = {} for ch in str1: freq_map[ch] = freq_map.get(ch, 0) + 1 unique_chars = set(str2) total_count = 0 for ch in unique_chars: total_count += freq_map.get(ch, 0) return total_count def main(): t = int(input()) for _ in range(t): str1 = input().strip() str2 = input().strip() print(sum_of_occurrences(str1, str2)) if __name__ == \"__main__\": main()"
  },
  {
    "id": 13,
    "problem_statement": "Problem Statement: You are given a number\u00a0NN, and your task is to determine whether it is a \"Good Number\" or not. A Good Number is defined as a number that is divisible by the sum of its own digits. If the number is divisible by the sum of its digits, it is classified as Good, otherwise, it is classified as Bad. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case contains a single integer\u00a0NN, the number you need to check. Output Format For each test case, print \"Good Number\" if the number is a Good, otherwise print \"Bad Number\". Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264N\u22641061\u2264N\u2264106 Sample 1: Input 3 18 19 21 Output Good Number Bad Number Good Number Explanation: Test Case 1: For the first test case, the sum of digits of 18 is 1+8=9. Since 18\u00f79=2, 18 is a Good Number. Test Case 2: For the second test case, the sum of digits of 19 is 1+9=10. Since 19\u00f710 is not an integer, 19 is a Bad Number. Test Case 3: For the third test case, the sum of digits of 21 is 2+1=3. Since 21\u00f73=7, 21 is a Good Number.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: t = int(input()) for _ in range(t): n = int(input()) num = n sum_of_digits = 0 while num != 0: d = num % 10 sum_of_digits += d num = num // 10 if n % sum_of_digits == 0: print(\"Good Number\") else: print(\"Bad Number\")"
  },
  {
    "id": 14,
    "problem_statement": "Problem Statement: You are tasked with determining the number of two-wheelers and four-wheelers that need to be manufactured based on the given total number of vehicles and the total number of wheels. You are provided with two integers: v: the total number of vehicles (both two-wheelers and four-wheelers). w: the total number of wheels for all the vehicles combined. Your task is to calculate and print how many\u00a0two-wheelers\u00a0and\u00a0four-wheelers\u00a0must be manufactured based on the input data. If it's not possible to manufacture such a combination, print\u00a0\u22121\u22121. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of two lines of input. The first line contains an integer\u00a0vv\u00a0\u2014 the total number of vehicles. The second line contains an integer\u00a0ww\u00a0\u2014 the total number of wheels. Output Format For each test case, If a valid combination of two-wheelers and four-wheelers exists, print two integers: The number of two-wheelers, the number of four-wheelers. If no valid combination is possible, print\u00a0-1. Constraints 1\u2264T\u22641001\u2264T\u2264100 0\u2264v\u22641060\u2264v\u2264106 0\u2264w\u226440\u2264w\u22644\u00a0x\u00a0106106 Sample 1: Input 2 12 34 10 25 Output 7 5 -1 Explanation: Test Case 1: You have\u00a012\u00a0vehicles in total and\u00a034\u00a0wheels, which is possible with\u00a07\u00a0two-wheelers and\u00a05\u00a0four-wheelers. Test Case 2: it is not possible to have\u00a025\u00a0wheels with\u00a010\u00a0vehicles, so the output is\u00a0-1.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def vehicle_manufacturing(): t = int(input()) for _ in range(t): v = int(input()) w = int(input()) if w % 2 != 0 or w < 2 or w < v * 2 or w > v * 4: print(\"-1\") else: tw = (4 * v - w) // 2  # Number of two-wheelers fw = v - tw  # Number of four-wheelers print(tw, fw) if __name__ == \"__main__\": vehicle_manufacturing()"
  },
  {
    "id": 15,
    "problem_statement": "Problem Statement: You are given a list of strings\u00a0strstr. Your task is to find the longest common prefix among all the strings in the list. If there is no common prefix, return\u00a0\u22121\u22121. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of two lines of input: The first line contains an integer N, the number of strings. The next line contain a string array str. Output Format For each test case, output the longest common prefix. If there is no common prefix, output\u00a0\u22121\u22121. Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264N\u22641001\u2264N\u2264100 1\u2264\u2223str\u2223\u22641001\u2264\u2223str\u2223\u2264100 All strings consist of lowercase alphabetical characters. Sample 1: Input 2 3 flower flow flight 2 dog racecar Output fl -1 Explanation: Test Case 1: the longest common prefix is \"fl\". Test Case 2: there is no common prefix, so the output -1.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def find_prefix(strings): strings.sort() first = strings[0] last = strings[-1] ans = \"\" for i in range(min(len(first), len(last))): if first[i] != last[i]: return ans if ans else \"-1\" ans += first[i] return ans if ans else \"-1\" if __name__ == \"__main__\": t = int(input()) for _ in range(t): n = int(input()) strings = input().strip().split() result = find_prefix(strings) print(result)"
  },
  {
    "id": 16,
    "problem_statement": "Problem Statement: You are given two sorted arrays,\u00a0arr1arr1\u00a0and\u00a0arr2arr2. Your task is to find the union of these two arrays. The union includes all distinct elements from both arrays in ascending order. Write a function that returns the union of\u00a0arr1arr1\u00a0and\u00a0arr2arr2\u00a0in a single sorted array. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of two lines of input: The first line contains two integers\u00a0NN\u00a0and\u00a0MM, denoting the size of the two arrays. The next two lines denotes the two arrays\u00a0arr1arr1\u00a0and\u00a0arr2arr2\u00a0of size\u00a0NN\u00a0and\u00a0MM\u00a0respectively. Output Format For each test case, output a sorted array containing the distinct elements from both\u00a0arr1arr1\u00a0and\u00a0arr2arr2. Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264N,M\u22641051\u2264N,M\u2264105 1\u2264arr1[i],arr2[i]\u22641091\u2264arr1[i],arr2[i]\u2264109 Both the arrays are sorted in ascending order. Sample 1: Input 2 5 4 1 3 4 5 7 2 3 5 10 3 2 11 12 13 14 25 Output 1 2 3 4 5 7 10 11 12 13 14 25 Explanation: Test Case 1: It returns all the distinct elements in sorted order. Test Case 2: All the elements are distinct, so it returns the array in sorted order.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def find_union(n, m, arr1, arr2): i, j = 0, 0 union_result = [] while i < n and j < m: if arr1[i] < arr2[j]: if not union_result or union_result[-1] != arr1[i]: union_result.append(arr1[i]) i += 1 elif arr1[i] > arr2[j]: if not union_result or union_result[-1] != arr2[j]: union_result.append(arr2[j]) j += 1 else: if not union_result or union_result[-1] != arr1[i]: union_result.append(arr1[i]) i += 1 j += 1 while i < n: if not union_result or union_result[-1] != arr1[i]: union_result.append(arr1[i]) i += 1 while j < m: if not union_result or union_result[-1] != arr2[j]: union_result.append(arr2[j]) j += 1 return union_result if __name__ == \"__main__\": t = int(input()) for _ in range(t): n, m = map(int, input().split()) arr1 = list(map(int, input().split())) arr2 = list(map(int, input().split())) result = find_union(n, m, arr1, arr2) print(\" \".join(map(str, result)))"
  },
  {
    "id": 17,
    "problem_statement": "Problem Statement: You are given a\u00a00\u2212indexed0\u2212indexed\u00a0integer array\u00a0numsnums. Your task is to find the leftmost equilibrium index in the array. An equilibrium index is defined as an index\u00a0ii\u00a0such that the sum of the elements to the left of\u00a0ii\u00a0is equal to the sum of the elements to the right of\u00a0ii. Formally, the equilibrium index\u00a0ii\u00a0satisfies the condition: sum(nums[0]+nums[1]+...+nums[i\u22121])=sum(nums[i+1]+nums[i+2]+...+nums[nums.length\u22121])sum(nums[0]+nums[1]+...+nums[i\u22121])=sum(nums[i+1]+nums[i+2]+...+nums[nums.length\u22121]) Conditions: If\u00a0ii\u00a0is\u00a000, the left sum is considered\u00a000. If\u00a0ii\u00a0is\u00a0(n\u22121)(n\u22121), the right sum is considered\u00a000. Input Format The first line of input will contain a single integer\u00a0TT, denoting the number of test cases. Each test case consists of two lines of input: The first line contains an integer\u00a0NN, length of array. The next line contain an array\u00a0numsnums\u00a0of length\u00a0NN. Output Format For each test case, return the leftmost equilibrium index if it exists, or return\u00a0\u22121\u22121\u00a0if there is no such index. Constraints 1\u2264T\u22641001\u2264T\u2264100 1\u2264N\u22641051\u2264N\u2264105 \u2212105\u2264numsi\u2264105\u2212105\u2264numsi\u200b\u2264105 Sample 1: Input 3 5 1 -1 2 1 -2 3 1 -1 4 6 1 2 3 4 5 6 Output 0 2 -1 Explanation: Test Case 1: For index 0, the left side is considered 0, and the right side sum is -1 + 2 + 1 + (-2) = 0. Hence, index 0 is an equilibrium index. Test Case 2: For index 2, the sum of numbers before index 2 is: 1 + -1 = 0 and sum of numbers after index 2 is: 0. Test Case 3: No index satisfies the equilibrium condition.",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def find_equilibrium_idx(nums): total_sum = sum(nums) left_sum = 0 for i in range(len(nums)): right_sum = total_sum - nums[i] - left_sum if left_sum == right_sum: return i left_sum += nums[i] return -1 def main(): t = int(input()) for _ in range(t): n = int(input()) arr = list(map(int, input().split())) equilibrium_idx = find_equilibrium_idx(arr) print(equilibrium_idx) if __name__ == \"__main__\": main()"
  },
  {
    "id": 18,
    "problem_statement": "Problem Statement: You are tasked with creating a program that converts a given integer (up to 4 digits) into its corresponding English words. Input Format First line of input contains a single integer\u00a0TT, the number of test cases. Each test case consists of a single line containing a number N. Output Format For each test case, output the number in words, following the English naming conventions. Each number should be converted to its corresponding words in lowercase, with words separated by a single space. Constraints 1\u2264T\u22641001\u2264T\u2264100 0\u2264N\u226499990\u2264N\u22649999 Sample 1: Input 2 7824 378 Output seven thousand eight hundred twenty four three hundred seventy eight Explanation: Test Case 1: The number 7824 is broken down as follows:\u00a07\u00a0in thousands place = \"seven thousand\"\u00a08\u00a0in hundreds place = \"eight hundred\"\u00a02\u00a0in tens place = \"twenty\"\u00a04\u00a0in units place = \"four\" Test Case 2: The number 370 is represented as:\u00a03\u00a0in hundreds place = \"three hundred\"\u00a07\u00a0in tens place = \"seventy\"\u00a08\u00a0in units place = \"eight\"",
    "example": null,
    "input": null,
    "output": null,
    "solution": "Solution: def convert_num_into_word(num_str): single_digit = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"] two_digits = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"] tens_multiple = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"] length = len(num_str) if length == 0: return if length == 1: print(single_digit[int(num_str[0])], end='') return i = 0 while i < len(num_str): if length == 4: if num_str[i] != '0': print(single_digit[int(num_str[i])], \"thousand\", end=' ') length -= 1 i += 1 elif length == 3: if num_str[i] != '0': print(single_digit[int(num_str[i])], \"hundred\", end=' ') length -= 1 i += 1 else: if num_str[i] == '1': if i + 1 < len(num_str):  # Check to avoid index error print(two_digits[int(num_str[i + 1])], end='') return elif num_str[i] != '0': print(tens_multiple[int(num_str[i])], end=' ') if i + 1 < len(num_str) and num_str[i + 1] != '0': print(single_digit[int(num_str[i + 1])], end='') return else: if i + 1 < len(num_str) and num_str[i + 1] != '0': print(single_digit[int(num_str[i + 1])], end='') return t = int(input()) for _ in range(t): N = input().strip()  # Ensure no leading/trailing whitespace convert_num_into_word(N) print()"
  }
]